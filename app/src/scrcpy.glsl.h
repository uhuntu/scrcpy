#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'scrcpy':
            Get shader desc: scrcpy_shader_desc()
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_vertex = 0
            Fragment shader: fs
                Image 'tex_y':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex_y = 0
                Image 'tex_cb':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex_cb = 1
                Image 'tex_cr':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex_cr = 2


    Shader descriptor structs:

        sg_shader scrcpy = sg_make_shader(scrcpy_shader_desc());

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_vertex] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_tex_y = 0;
        SLOT_tex_cb = 1;
        SLOT_tex_cr = 2;

*/
#include <stdint.h>
#include <stdbool.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_vertex (0)
#define SLOT_tex_y (0)
#define SLOT_tex_cb (1)
#define SLOT_tex_cr (2)
/*
    #version 330

    out vec2 uv;
    layout(location = 0) in vec2 vertex;

    void main()
    {
        uv = vertex;
        gl_Position = vec4(((vertex * 2.0) - vec2(1.0)) * vec2(1.0, -1.0), 0.0, 1.0);
    }

*/
static const char vs_source_glsl330[182] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x28,0x76,0x65,0x72,0x74,0x65,0x78,0x20,
    0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,
    0x30,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,
    0x2d,0x31,0x2e,0x30,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330

    uniform sampler2D tex_y;
    uniform sampler2D tex_cb;
    uniform sampler2D tex_cr;

    in vec2 uv;
    layout(location = 0) out vec4 frag_color;
    mat4 rec601;

    void main()
    {
        rec601 = mat4(vec4(1.16437995433807373046875, 0.0, 1.5960299968719482421875, -0.870790004730224609375), vec4(1.16437995433807373046875, -0.39175999164581298828125, -0.812969982624053955078125, 0.52959001064300537109375), vec4(1.16437995433807373046875, 2.01723003387451171875, 0.0, -1.08139002323150634765625), vec4(0.0, 0.0, 0.0, 1.0));
        frag_color = vec4(texture(tex_y, uv).x, texture(tex_cb, uv).x, texture(tex_cr, uv).x, 1.0) * rec601;
    }

*/
static const char fs_source_glsl330[625] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x74,0x65,0x78,0x5f,0x79,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x5f,0x63,0x62,0x3b,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x32,0x44,0x20,0x74,0x65,0x78,0x5f,0x63,0x72,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x6d,0x61,0x74,0x34,0x20,0x72,0x65,0x63,0x36,0x30,0x31,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x63,0x36,0x30,0x31,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,
    0x76,0x65,0x63,0x34,0x28,0x31,0x2e,0x31,0x36,0x34,0x33,0x37,0x39,0x39,0x35,0x34,
    0x33,0x33,0x38,0x30,0x37,0x33,0x37,0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x35,0x39,0x36,0x30,0x32,0x39,0x39,0x39,0x36,
    0x38,0x37,0x31,0x39,0x34,0x38,0x32,0x34,0x32,0x31,0x38,0x37,0x35,0x2c,0x20,0x2d,
    0x30,0x2e,0x38,0x37,0x30,0x37,0x39,0x30,0x30,0x30,0x34,0x37,0x33,0x30,0x32,0x32,
    0x34,0x36,0x30,0x39,0x33,0x37,0x35,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x31,
    0x2e,0x31,0x36,0x34,0x33,0x37,0x39,0x39,0x35,0x34,0x33,0x33,0x38,0x30,0x37,0x33,
    0x37,0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x2c,0x20,0x2d,0x30,0x2e,0x33,0x39,0x31,
    0x37,0x35,0x39,0x39,0x39,0x31,0x36,0x34,0x35,0x38,0x31,0x32,0x39,0x38,0x38,0x32,
    0x38,0x31,0x32,0x35,0x2c,0x20,0x2d,0x30,0x2e,0x38,0x31,0x32,0x39,0x36,0x39,0x39,
    0x38,0x32,0x36,0x32,0x34,0x30,0x35,0x33,0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,
    0x35,0x2c,0x20,0x30,0x2e,0x35,0x32,0x39,0x35,0x39,0x30,0x30,0x31,0x30,0x36,0x34,
    0x33,0x30,0x30,0x35,0x33,0x37,0x31,0x30,0x39,0x33,0x37,0x35,0x29,0x2c,0x20,0x76,
    0x65,0x63,0x34,0x28,0x31,0x2e,0x31,0x36,0x34,0x33,0x37,0x39,0x39,0x35,0x34,0x33,
    0x33,0x38,0x30,0x37,0x33,0x37,0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x2c,0x20,0x32,
    0x2e,0x30,0x31,0x37,0x32,0x33,0x30,0x30,0x33,0x33,0x38,0x37,0x34,0x35,0x31,0x31,
    0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x2d,0x31,0x2e,0x30,
    0x38,0x31,0x33,0x39,0x30,0x30,0x32,0x33,0x32,0x33,0x31,0x35,0x30,0x36,0x33,0x34,
    0x37,0x36,0x35,0x36,0x32,0x35,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x74,0x65,0x78,0x5f,0x79,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,0x2c,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x5f,0x63,0x62,0x2c,0x20,
    0x75,0x76,0x29,0x2e,0x78,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,
    0x65,0x78,0x5f,0x63,0x72,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x20,0x2a,0x20,0x72,0x65,0x63,0x36,0x30,0x31,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before scrcpy.glsl.h"
#endif
static inline const sg_shader_desc* scrcpy_shader_desc(void) {
  if (sg_query_backend() == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "vertex";
      desc.vs.source = vs_source_glsl330;
      desc.vs.entry = "main";
      desc.fs.source = fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "tex_y";
      desc.fs.images[0].type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "tex_cb";
      desc.fs.images[1].type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[2].name = "tex_cr";
      desc.fs.images[2].type = SG_IMAGETYPE_2D;
      desc.fs.images[2].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "scrcpy_shader";
    };
    return &desc;
  }
  return 0;
}
